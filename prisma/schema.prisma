// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Student {
  id                String                @id @default(cuid())
  parentUserId      String                @map("parent_user_id") // Clerk user ID
  firstName         String                @map("first_name")
  lastName          String                @map("last_name")
  dateOfBirth       DateTime?             @map("date_of_birth")
  avatar            String?               
  isActive          Boolean               @default(true) @map("is_active")
  createdAt         DateTime              @default(now()) @map("created_at")
  updatedAt         DateTime              @updatedAt @map("updated_at")

  // Relationships
  learningPlans     LearningPlan[]
  progressLog       ProgressLog[]

  @@index([parentUserId])
  @@map("students")
}

// Subject enum for type safety
enum Subject {
  MATH
  ELA
  SCIENCE
  HUMANITIES
}

// Simple progress action types
enum ProgressAction {
  STARTED    // Student started working on a node
  COMPLETED  // Student completed the node
}

// Combined progress tracking - both current state and historical
model ProgressLog {
  id                String          @id @default(cuid())
  studentId         String          @map("student_id")
  nodeId            String          @map("node_id")
  action            ProgressAction  // STARTED or COMPLETED
  createdAt         DateTime        @default(now()) @map("created_at")

  // Relations
  student           Student         @relation(fields: [studentId], references: [id], onDelete: Cascade)
  node              CurriculumNode  @relation("ProgressLog", fields: [nodeId], references: [id])

  @@index([studentId])
  @@index([studentId, createdAt])
  @@index([nodeId])
  @@map("progress_log")
}

model CurriculumNode {
  id           String   @id
  unitTitle    String   @map("unit_title")
  unitNumber   Int      @map("unit_number")
  courseTitle  String   @map("course_title")
  coursePath   String   @map("course_path")
  gradeLevel   String   @map("grade_level")
  subject      String
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relationships
  outgoingEdges CurriculumEdge[] @relation("FromNode")
  incomingEdges CurriculumEdge[] @relation("ToNode")
  progressLog   ProgressLog[]    @relation("ProgressLog")

  @@map("curriculum_nodes")
}

model CurriculumEdge {
  id               String @id @default(cuid())
  fromNodeId       String @map("from_node_id")
  toNodeId         String @map("to_node_id")
  relationshipType String @map("relationship_type")
  description      String
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  // Relations
  fromNode CurriculumNode @relation("FromNode", fields: [fromNodeId], references: [id], onDelete: Cascade)
  toNode   CurriculumNode @relation("ToNode", fields: [toNodeId], references: [id], onDelete: Cascade)

  @@unique([fromNodeId, toNodeId])
  @@map("curriculum_edges")
}

model LearningPlan {
  id              String                @id @default(cuid())
  studentId       String                @map("student_id")
  startDate       DateTime              @map("start_date")
  endDate         DateTime              @map("end_date")
  isActive        Boolean               @default(true) @map("is_active")
  unitIds         String[]              @map("unit_ids") // Simple array of curriculum node IDs
  createdAt       DateTime              @default(now()) @map("created_at")
  updatedAt       DateTime              @updatedAt @map("updated_at")

  // Relations
  student         Student               @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@index([studentId])
  @@index([isActive])
  @@map("learning_plans")
}


